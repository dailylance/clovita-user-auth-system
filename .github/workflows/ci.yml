name: CI

on:
  push:
    branches: [ main ]
  name: CI

  on:
    push:
      branches: [ main ]
    pull_request:
      branches: [ main ]

  jobs:
    build-and-test:
      runs-on: ubuntu-latest
      services:
        postgres:
          image: postgres:16
          ports: ['5432:5432']
          env:
            POSTGRES_PASSWORD: postgres
            POSTGRES_USER: postgres
            POSTGRES_DB: clovita
          options: >-
            --health-cmd="pg_isready -U postgres" 
            --health-interval=10s 
            --health-timeout=5s 
            --health-retries=5

      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'
        - name: Install dependencies
          run: npm ci
        - name: Set up env
          run: |
            cp .env.example .env
            echo DATABASE_URL=postgresql://postgres:postgres@localhost:5432/clovita >> .env
            echo JWT_SECRET=test-secret >> .env
            echo ENABLE_EMAIL=false >> .env
        - name: Generate Prisma Client
          run: npx prisma generate
        - name: Apply migrations
          run: npx prisma migrate deploy
        - name: Lint
          run: npm run lint --silent
        - name: Typecheck
          run: npx tsc -p tsconfig.json --noEmit
        - name: Start API
          run: npm run dev & sleep 5
        - name: E2E Auth API
          env:
            API_BASE_URL: http://localhost:3000
          run: npm run test:auth:api
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
